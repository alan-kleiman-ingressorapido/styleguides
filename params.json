{"name":"Styleguides","tagline":"A repository with a coding standard/style guide and conventions document for each of the languages I care about","body":"# Style Guides\r\n\r\nThis repository contains a set of style guides, coding conventions and\r\nstandards for the languages I care about.\r\n\r\n## Purpose\r\n\r\nI am sick of putting this stuff up for a vote every new team I create or\r\nstart up. It consumes less time if we just for a set of conventions and\r\nstandards that I am already happy with and iterate on that for the teams\r\nneeds.\r\n\r\nThere will be a `master` branch which will contain the coding styles,\r\nconventions and standards that I personally prefer. The `develop` branch\r\nmay contain some tweaks I am playing with and haven't decided upon yet.\r\n\r\nOther branches will be the living standard for the team, OSS project,\r\netc. that I am an active participant in that doesn't mind this being\r\npublic.\r\n\r\nAnyone is allowed to fork this repository and update the style guides\r\nfor their own purposes and teams use.\r\n\r\nA lot of this I don't really have strong opinions on (unless otherwise\r\nmentioned) the key is consistency of a codebase's style and conventions\r\nin a team setting with many people contributing. It reduces the maintenance\r\ncosts of codebases if there is a shared understanding of standards and\r\nconventions that should be adhered to.\r\n\r\nThese should be enforced during review.\r\n\r\n## Philosophy\r\n\r\nWhy is there a section on philosophy in a style guideline repo? The benefit\r\nof writing easy to manage code is universally obvious, right? While the\r\ndirect goal of easily manageable code can be seen as beneficial, the\r\nindirect results, including improving the team dynamic is not immediately\r\nobvious to everyone. That, and good code gives us the power to form\r\nVoltron.\r\n\r\nThe enforcement of coding standards and styles can mostly be left to build\r\nautomation, thankfully! This leaves us with an amazing cognitive ability\r\nthat we shouldn't waste. The aspect of building and deploying services\r\nrequires an immense amount of technical knowledge and design fudamentals.\r\nHow do we learn these? How does an entire team get on the same page? How\r\ndo technical leads respectfully and thoughtfully instill a vision and\r\nmethodology into others in their team? How do you actually poach an egg?\r\nTo successfully achieve this we must take into account several aspects of\r\nsystems management, software design and human nature. To see the product\r\nof competent engineers successfully delivered to customers through awesome\r\noperations is a beautiful thing. What does this have to do with style? If\r\nthe style of the code is homogenous, the actual problem being solved,\r\nsolution being presented or change being applied can be the focus of the\r\nconversation. This shift in focus, while the result of minor changes in\r\nworkflow causes the entirety of the interactive discussion to be about\r\nactual issues, and not syntax. The primary objective here being to add\r\nintelligent human discussion to the problem being solved. While we achieve\r\nthis, the other benefits should not be ignored. A team that does code\r\nreviews fosters an increased level of respect amongst the group. The\r\ndiscussions create a shared belief in the vision of the application/company\r\nand the team. This takes the power of leadership out of one person's hands\r\nand puts it into the hands of everyone who cares. In addition to these,\r\ndoing good code reviews gives everyone a chance to improve, constantly. Any\r\nengineer who thinks they are at the top of their game is ignorant of their\r\nsurroundings and should not be trusted. Everyone has room to improve, and\r\nrespectful, stylistically correct, code reviews are an amazing way to do\r\nexactly that.\r\n\r\n## License\r\n\r\nThis is licensed under the 3-clause BSD license. See LICENSE file for\r\nmore details.\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}